#
# ~/.bash.d/git
#
# Description:
#     Separate file for git related stuff.
#     For aliases, use the built in alias system in git
#     instead of bash aliases (except 'got').
#
# This file is sourced from ~/.bashrc
#

alias got='git'
alias gir='git'

# Git completion and git prompt
if [[ ${__DARWIN__} ]]; then
    gitCompl='/opt/local/share/git/contrib/completion/git-completion.bash'
    gitPrompt='/opt/local/share/git/contrib/completion/git-prompt.sh'
else
    gitCompl='/usr/share/git-core/contrib/completion/git-completion.bash'
    gitPrompt='/usr/share/git-core/contrib/completion/git-prompt.sh'
fi

# Load git-completion
[ -f ${gitCompl} ] && . ${gitCompl}
[ -f ${gitPrompt} ] && . ${gitPrompt}

# Add git-prompt
PS1="\[\e[0;32m\]\$(__git_ps1 \"(%s)\")\[\e[0m\]${PS1}";


# Functions
# ----------------------------------------

# Get log from last tag -> releasnotes.
#git log --oneline --no-merges $(git describe --tags --abbrev=0 @^)..@


# rbm: A flow function to ReBase and Merge
# I use it often with:
#   $ rbm && git push && git sw devel
function rbm() {
    local _branch="${1:-devel}";
    git switch "${_branch}" && git rebase main;
    git switch main && git merge "${_branch}";
}

function rbma() {
    local _branch="${1:-devel}";
    git switch "${_branch}" && git rebase master;
    git switch master && git merge "${_branch}";
}

# ${@} to add '-f' or spec branch, etc
function gitPush() { rbm && git push ${@} && git switch devel; }
function gitPusha() { rbma && git push ${@} && git switch devel; }

# Sign commit and tag
# Usage: versionBump v1.2.3
function versionBump() {
    local _v="${1}";
    git commit -a -m "Version bump for tag/release: ${_v}";
    git tag -a -s "${_v}" -m "${PWD##*/}, ${_v}" -e;
}

# Git commits between dates (fallback to current date)
# https://davidwalsh.name/search-git-dates
# Usage: ciBetween [ yyyy-mm-dd ] [ yyyy-mm-dd ]
function ciBetween() {
    local _from="${1:-$(date '+%F')}";
    local _to="${2:-$(date '+%F')}";
    git log --after="${_from}" --before="${_to}" --oneline;
}

# A modified version if giterate found here:
# http://www.codetunnel.com/tips-for-working-with-git/
function giterate() {
    echo;
    for repo in */; do
        if [ -d ${repo}/.git ]; then
            echo "Repository: ${repo}";
            git -C ${repo} "$@";
            echo;
        fi
    done
}

# Get shortURL from git.io
function gitio() {
    local _url="${1}";
    echo $(curl -i https://git.io -F url="${_url}" 2>/dev/null \
        | grep 'Location' | awk '{ print $2 }');
}

# Get/generate a .gitignore from: https://gitignore.io
# renaming func gi -> gitign
# Usage gitign foo,bar,baz
function gitign() { curl -sL "https://www.gitignore.io/api/${@}"; echo; }

# Function to create archives
# Usage: gitArchive [zip|bz|xz|gz] (xz = default)
#
# To use xz, add to config:
#   git config --global tar.tar.xz.command "xz -c"
function gitArchive () {
    # Only use inside a repo.
    [ ! -d '.git' ] && echo -e "\e[1;31m :: \e[0m\"`pwd`\" is not a git repository." && return 1;

    local _ext=${1:-xz};
    _branch=$(git symbolic-ref --short HEAD 2>/dev/null);
    _repo=$(basename `git rev-parse --show-toplevel`);
    [[ ${_branch} == 'main' ]] && _append='' || _append="-${_branch}";
    [[ ${_ext} == 'zip' ]] && _ext='zip' || _ext="${_ext}";

    # File name, examples:
    # master:       fooProject_2015-01-01
    # branchname:   fooProject_2015-01-01-branchname
    _output="${_repo}_$(date '+%F')${_append}";

    case ${_ext} in
        # zip
        zip)
            git archive \
                --format=zip -9 -o "../${_output}.${_ext}" \
                --prefix="${_output}/" "${_branch}";
            ;;

        # tar.bz
        bz2)
            git archive \
                --prefix="${_output}/" "${_branch}" \
                | bzip2 > "../${_output}.tar.${_ext}";
            ;;

        # tar.gz & tar.xz (default = xz)
        xz|gz|*)
            git archive \
                --format=tar.${_ext} -o "../${_output}.tar.${_ext}" \
                --prefix="${_output}/" "${_branch}";
            ;;
    esac
}

# Function to list (checkout) [b]ranches [b]y [d]ate (bbd)
# https://gist.github.com/ahmedelgabri/2684c4578c3fe5990c5a
#
# Usage: bbd "Sep 14"
#        bbd "Sep"
function bbd() {
    git reflog --date=local | grep "${1} .* checkout: moving from .* to" \
        | grep -o "[a-zA-Z0-9\-]*$" | sort | uniq;
}
